# Generated by Django 2.1.2 on 2018-10-17 09:57

from django.conf import settings
from django.db import migrations, models
import tcms.core.models.base


plan_types = [
    'Unit',
    'Integration',
    'Function',
    'System',
    'Acceptance',
    'Installation',
    'Performance',
    'Product',
    'Interoperability',
    'Smoke',
    'Regression',
]


def forwards_add_initial_data(apps, schema_editor):
    TestPlanType = apps.get_model('testplans', 'TestPlanType')

    TestPlanType.objects.bulk_create(
        [TestPlanType(name=name, description='') for name in plan_types])


def reverse_add_initial_data(apps, schema_editor):
    TestPlanType = apps.get_model('testplans', 'TestPlanType')
    TestPlanType.objects.filter(name__in=plan_types).delete()


def delete_stale_content_type(apps, schema_editor):
    ContentType = apps.get_model('contenttypes', 'ContentType')
    ContentType.objects.filter(model='testplanpermission').delete()


class Migration(migrations.Migration):

    replaces = [
        ('testplans', '0001_initial'),
        ('testplans', '0002_add_initial_data'),
        ('testplans', '0003_delete_testplanpermissions_model'),
        ('testplans', '0004_remove_model_TestPlanActivity'),
        ('testplans', '0005_delete_attachments')
    ]

    initial = True

    dependencies = [
        ('management', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TCMSEnvPlanMap',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True,
                                        serialize=False,
                                        verbose_name='ID')),
                ('group', models.ForeignKey(on_delete=models.deletion.CASCADE,
                                            to='management.TCMSEnvGroup')),
            ],
            options={
                'db_table': 'tcms_env_plan_map',
            },
        ),
        migrations.CreateModel(
            name='TestPlan',
            fields=[
                ('plan_id', models.AutoField(max_length=11, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('create_date', models.DateTimeField(auto_now_add=True, db_column='creation_date')),
                ('is_active', models.BooleanField(db_column='isactive',
                                                  db_index=True,
                                                  default=True)),
                ('extra_link', models.CharField(blank=True,
                                                default=None,
                                                max_length=1024,
                                                null=True)),
            ],
            options={
                'db_table': 'test_plans',
            },
            bases=(models.Model, tcms.core.models.base.UrlMixin),
        ),
        migrations.CreateModel(
            name='TestPlanComponent',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True,
                                        serialize=False,
                                        verbose_name='ID')),
                ('component', models.ForeignKey(on_delete=models.deletion.CASCADE,
                                                to='management.Component')),
                ('plan', models.ForeignKey(on_delete=models.deletion.CASCADE,
                                           to='testplans.TestPlan')),
            ],
            options={
                'db_table': 'test_plan_components',
            },
        ),
        migrations.CreateModel(
            name='TestPlanEmailSettings',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True,
                                        serialize=False,
                                        verbose_name='ID')),
                ('is_active', models.BooleanField(default=False)),
                ('auto_to_plan_owner', models.BooleanField(default=False)),
                ('auto_to_plan_author', models.BooleanField(default=False)),
                ('auto_to_case_owner', models.BooleanField(default=False)),
                ('auto_to_case_default_tester', models.BooleanField(default=False)),
                ('notify_on_plan_update', models.BooleanField(default=False)),
                ('notify_on_plan_delete', models.BooleanField(default=False)),
                ('notify_on_case_update', models.BooleanField(default=False)),
                ('plan', models.OneToOneField(on_delete=models.deletion.CASCADE,
                                              related_name='email_settings',
                                              to='testplans.TestPlan')),
            ],
        ),
        migrations.CreateModel(
            name='TestPlanTag',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True,
                                        serialize=False,
                                        verbose_name='ID')),
                ('user', models.IntegerField(db_column='userid', default='1')),
                ('plan', models.ForeignKey(on_delete=models.deletion.CASCADE,
                                           to='testplans.TestPlan')),
                ('tag', models.ForeignKey(on_delete=models.deletion.CASCADE,
                                          to='management.TestTag')),
            ],
            options={
                'db_table': 'test_plan_tags',
            },
        ),
        migrations.CreateModel(
            name='TestPlanText',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True,
                                        serialize=False,
                                        verbose_name='ID')),
                ('plan_text_version', models.IntegerField()),
                ('create_date', models.DateTimeField(auto_now_add=True, db_column='creation_ts')),
                ('plan_text', models.TextField(blank=True)),
                ('checksum', models.CharField(max_length=32)),
                ('author', models.ForeignKey(db_column='who',
                                             on_delete=models.deletion.CASCADE,
                                             to=settings.AUTH_USER_MODEL)),
                ('plan', models.ForeignKey(on_delete=models.deletion.CASCADE,
                                           related_name='text',
                                           to='testplans.TestPlan')),
            ],
            options={
                'ordering': ['plan', '-plan_text_version'],
                'db_table': 'test_plan_texts',
            },
            bases=(models.Model, tcms.core.models.base.UrlMixin),
        ),
        migrations.CreateModel(
            name='TestPlanType',
            fields=[
                ('id', models.AutoField(db_column='type_id', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['name'],
                'db_table': 'test_plan_types',
            },
            bases=(models.Model, tcms.core.models.base.UrlMixin),
        ),
        migrations.AddField(
            model_name='testplan',
            name='author',
            field=models.ForeignKey(on_delete=models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='testplan',
            name='component',
            field=models.ManyToManyField(through='testplans.TestPlanComponent',
                                         to='management.Component'),
        ),
        migrations.AddField(
            model_name='testplan',
            name='env_group',
            field=models.ManyToManyField(through='testplans.TCMSEnvPlanMap',
                                         to='management.TCMSEnvGroup'),
        ),
        migrations.AddField(
            model_name='testplan',
            name='owner',
            field=models.ForeignKey(blank=True,
                                    null=True,
                                    on_delete=models.deletion.CASCADE,
                                    related_name='myplans',
                                    to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='testplan',
            name='parent',
            field=models.ForeignKey(blank=True,
                                    null=True,
                                    on_delete=models.deletion.CASCADE,
                                    related_name='child_set',
                                    to='testplans.TestPlan'),
        ),
        migrations.AddField(
            model_name='testplan',
            name='product',
            field=models.ForeignKey(on_delete=models.deletion.CASCADE,
                                    related_name='plan',
                                    to='management.Product'),
        ),
        migrations.AddField(
            model_name='testplan',
            name='product_version',
            field=models.ForeignKey(on_delete=models.deletion.CASCADE,
                                    related_name='plans',
                                    to='management.Version'),
        ),
        migrations.AddField(
            model_name='testplan',
            name='tag',
            field=models.ManyToManyField(through='testplans.TestPlanTag', to='management.TestTag'),
        ),
        migrations.AddField(
            model_name='testplan',
            name='type',
            field=models.ForeignKey(on_delete=models.deletion.CASCADE, to='testplans.TestPlanType'),
        ),
        migrations.AddField(
            model_name='tcmsenvplanmap',
            name='plan',
            field=models.ForeignKey(on_delete=models.deletion.CASCADE, to='testplans.TestPlan'),
        ),
        migrations.AlterUniqueTogether(
            name='testplantext',
            unique_together={('plan', 'plan_text_version')},
        ),
        migrations.AlterUniqueTogether(
            name='testplancomponent',
            unique_together={('plan', 'component')},
        ),
        migrations.AlterIndexTogether(
            name='testplan',
            index_together={('product', 'plan_id')},
        ),

        migrations.RunPython(forwards_add_initial_data, reverse_add_initial_data),
        migrations.RunPython(delete_stale_content_type),
    ]
